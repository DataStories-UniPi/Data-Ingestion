services:
  postgres:
    image: postgres:15
    container_name: postgres_container
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - etl_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3

  etl:
    container_name: etl_container
    build:
      context: ./src
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - ./src/scripts:/app/scripts:ro
      - ./src/misc:/app/misc:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - etl_network
    restart: unless-stopped
    command: ["/app/scripts/etl_pipe.py"]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - etl_network

volumes:
  pgadmin_data:
  postgres_data:
    driver: local

networks:
  etl_network:
    driver: bridge
